stop("You have entered a wrong normalization method")
}
}
## Specify the test/prediction timepoints for metalonda
if(num.intervals == "none")
points = seq(min(Time), max(Time))
else
points = seq(min(Time), max(Time), length.out = num.intervals + 1)
cat("Prediction Points = ")
print(points)
cat("\n")
## Filter out the taxa that always have zero of one/both group
Group = as.character(Group)
group.levels = sort(unique(Group))
if(length(group.levels) > 2){
stop("You have more than two phenotypes.")
}
gr.1 = group.levels[1]
gr.2 = group.levels[2]
data.count.filt = as.matrix(Count)
## Apply metalonda for each feature
n.features = nrow(data.count.filt)
detailed = list()
summary = list()
for (i in 1:n.features)
{
cat ("Feature  = ", rownames(data.count.filt)[i], "\n")
out = metalonda(Count = data.count.filt[i,], Time = Time, Group = Group, ID = ID,
fit.method = fit.method, n.perm = n.perm, points = points,
text=rownames(data.count.filt)[i], parall = parall, pvalue.threshold, adjust.method, time.unit,
ylabel = ylabel, col = col)
detailed[[i]] = out$detailed
summary[[i]] = out$summary
}
summary.tmp = do.call(rbind, summary)
summary.tmp$dominant[which(summary.tmp$dominant == 1)] = gr.1
summary.tmp$dominant[which(summary.tmp$dominant == -1)] = gr.2
## Output table and figure that summarize the significant time intervals
write.csv(summary.tmp, file = sprintf("%s_MetaLonDA_TimeIntervals.csv", prefix), row.names = FALSE)
visualizeTimeIntervals(interval.details = summary.tmp, prefix, unit = time.unit, col = col)
return(list(output.detail = detailed, output.summary = summary.tmp))
}
#' Permute group labels
#'
#' Permutes the group label of the samples in order to construct the AR empirical distibution
#'
#' @param perm.dat dataframe has the Count, Group, ID, Time
#' @param n.perm number of permutations
#' @param method The fitting method (negative binomial, LOWESS)
#' @param points The points at which the prediction should happen
#' @param lev the two level's name
#' @param parall boolean to indicate whether to use multicore.
#' @return returns the fitted model for all the permutations
#' @import plyr
#' @import utils
#' @references
#' Ahmed Metwally (ametwall@stanford.edu)
#' @examples
#' data(metalonda_test_data)
#' n.sample = 5
#' n.timepoints = 10
#' n.perm = 3
#' n.group = 2
#' Group = factor(c(rep(0, n.sample*n.timepoints), rep(1, n.sample*n.timepoints)))
#' Time = rep(rep(1:n.timepoints, times = n.sample), 2)
#' ID = factor(rep(1:(2*n.sample), each = n.timepoints))
#' points = seq(1, 10, length.out = 10)
#' aggregate.df = data.frame(Count = metalonda_test_data[1,], Time = Time, Group = Group, ID = ID)
#' prm = permutation(aggregate.df, n.perm = 3, method = "nbinomial", points)
#' @export
permutation = function(perm.dat, n.perm = 500, method = "nbinomial", points, lev, parall = FALSE){
## Start permutation
cat("Start Permutation \n")
pp = list()
perm = 0 # to be able to store the value
n.subjects = length(unique(perm.dat$ID))
#cat("# of Subjects = ", n.subjects, "\n")
## Run in Parallel
if(parall == TRUE) {
max.cores = detectCores()
cat("# cores = ", max.cores, "\n")
desired.cores = max.cores - 1
cl = makeCluster(desired.cores)
registerDoParallel(cl)
}
pp = llply(1:n.perm, function(j){
for (i in levels(perm.dat$ID)){
perm.uniq.len = 1
m=0
while(perm.uniq.len == 1){
m = m + 1
perm.dat[which(perm.dat$ID == i),]$Group = rep(sample(c(0,1),1), sum(perm.dat$ID == i))# ,  replace = TRUE) #rep(sample(1:2), each = time.point)
perm.uniq.len = length(unique(perm.dat$Group))
}
}
g.0 = perm.dat[perm.dat$Group == 0, ]
g.1 = perm.dat[perm.dat$Group == 1, ]
g.min = max(sort(g.0$Time)[1], sort(g.1$Time)[1])
g.max = min(sort(g.0$Time)[length(g.0$Time)], sort(g.1$Time)[length(g.1$Time)])
if(g.min > min(points) | g.max < max(points))
{
cat("Special Case: generated permutation is out of range \n")
assign(paste("Model", j, sep = "_"), NULL)
}
else if (length(which(sum(g.0$Count) == 0 | sum(g.1$Count)==0)))
{
cat("Special Case: zero for all variable of one group \n")
assign(paste("Model", j, sep = "_"), NULL)
}
else
{
perm = curveFitting(df = perm.dat, method = method, points)
assign(paste("Model", j, sep = "_"), perm)
}
}, .parallel = parall, .progress = "text", .inform = TRUE,
.paropts = list(.export=ls(.GlobalEnv),
.packages=.packages(all.available=T)))
if(parall == TRUE) {
stopCluster(cl)
}
pp[sapply(pp, is.null)] = NULL
return(pp)
}
source("R/CurveFitting.R")
source("R/Visualization.R")
source("R/Permutation.R")
source("R/Normalization.R")
source("R/Metalonda.R")
output.metalonda.f5 = metalonda(Count = metalonda_test_data[5,], Time = Time, Group = Group,
ID = ID, n.perm = 5, fit.method = "nbinomial", points = points,
text = rownames(metalonda_test_data)[5], parall = FALSE, pvalue.threshold = 0.05,
adjust.method = "BH", time.unit = "hours", ylabel = "Read Counts", col = c("chartreuse", "blue4"))
output.metalonda.f5 = metalonda(Count = metalonda_test_data[5,], Time = Time, Group = Group,
ID = ID, n.perm = 100, fit.method = "nbinomial", points = points,
text = rownames(metalonda_test_data)[5], parall = FALSE, pvalue.threshold = 0.05,
adjust.method = "BH", time.unit = "hours", ylabel = "Read Counts", col = c("chartreuse", "blue4"))
require("heatmap3")
library("data.table")
library("ggplot2")
library("phyloseq")
library("DESeq2")
require("vegan")
library("devtools")
library("zoo")
setwd("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/UIC/LungTransplantWASHU/manuscript_prep/manuscript_v1.2/CF_LTx_Microbiome_github")
set.seed(635473)
cbbPalette_9 = c("#56B4E9", "sienna1", "#009E73", "darkorchid",  "#F0E442", "#0072B2", "#CC79A7", "#999999", "#000000")
cbbPalette_10 = c("#999999", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000", "#E69F00", "#56B4E9", "#009E73", "darkorchid")
cbbPalette_12 = c("#999999", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000", "#E69F00", "#56B4E9", "#009E73", "darkorchid",
"mistyrose1", "sienna1")
countTable = read.csv(file="../data/LungTxCF12_countMatrix.csv", header=TRUE, check.names = FALSE, row.names = 1)
countTable = as.matrix(countTable)
taxaTable = read.csv(file="../data/LungTxCF12_OTUMatrix.csv", header=TRUE, check.names = FALSE, row.names = 1)
taxaTable = as.matrix(taxaTable)
meta = read.csv(file="../data/Supplement_table_1_CF_12_v2.6.csv", header = TRUE)
OTU = otu_table(countTable, taxa_are_rows = TRUE)
TAX = tax_table(taxaTable)
META = sample_data(meta)
sample_names(META) = meta$SampleIDFP
physeq = phyloseq(OTU, TAX, META)
physeq = subset_taxa(physeq, Superkingdom != "")
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))
}
phseq_dds = phyloseq_to_deseq2(physeq, ~ Outcome)
geoMeans = apply(counts(phseq_dds), 1, gm_mean)
phseq_dds_est = estimateSizeFactors(phseq_dds, geoMeans = geoMeans)
otu_matrix_norm = as.data.frame(counts(phseq_dds_est, normalized=TRUE))
OTU_norm = otu_table(otu_matrix_norm, taxa_are_rows = TRUE)
physeq_norm = phyloseq(OTU_norm, TAX, META)
level = "Species"
microbial.subset = subset_taxa(microbial_norm, !is.na(level) & !level %in% c("", "uncharacterized"))
prevdf = apply(X = otu_table(microbial.subset),
MARGIN = ifelse(taxa_are_rows(microbial.subset), yes = 1, no = 2),
FUN = function(x){sum(x > 5)})
eukaryota = subset_taxa(physeq, Superkingdom == "Eukaryota")
microbial = subset_taxa(physeq, Superkingdom != "Eukaryota")
bacteria = subset_taxa(microbial, Superkingdom == "Bacteria")
virus = subset_taxa(microbial, Superkingdom == "Viruses")
archaea = subset_taxa(microbial, Superkingdom = "Archaea")
eukaryota_norm = subset_taxa(physeq_norm, Superkingdom == "Eukaryota")
microbial_norm = subset_taxa(physeq_norm, Superkingdom != "Eukaryota")
bacteria_norm = subset_taxa(microbial_norm, Superkingdom == "Bacteria")
virus_norm = subset_taxa(microbial_norm, Superkingdom == "Viruses")
archaea_norm = subset_taxa(microbial_norm, Superkingdom = "Archaea")
level = "Species"
microbial.subset = subset_taxa(microbial_norm, !is.na(level) & !level %in% c("", "uncharacterized"))
prevdf = apply(X = otu_table(microbial.subset),
MARGIN = ifelse(taxa_are_rows(microbial.subset), yes = 1, no = 2),
FUN = function(x){sum(x > 5)})
prevdf = data.frame(Prevalence = prevdf,
TotalAbundance = taxa_sums(microbial.subset),
tax_table(microbial.subset))
plyr::ddply(prevdf, level, function(df1){cbind(mean(df1$Prevalence),sum(df1$Prevalence))})
prevdf1 = subset(prevdf, Species %in% get_taxa_unique(microbial.subset, "Species"))
prevalenceThreshold = 0.05 * nsamples(microbial.subset)
prevalenceThreshold
prevalenceThreshold
keepTaxa = rownames(prevdf1)[(prevdf1$Prevalence >= prevalenceThreshold)]
microbial.filtered = prune_taxa(keepTaxa, microbial.subset)
level =  "Phylum"
microbial.glom = tax_glom(microbial.filtered, level)
dim(otu_table(microbial.glom))
apply(otu_table(microbial.glom), 1 , sum)
apply(otu_table(microbial.glom), 1 , mean)
apply(otu_table(microbial.glom), 1 , median)
microbial.glom.count = as.data.frame(otu_table(microbial.glom))
for (i in rownames(microbial.glom.count))
{
x = as.vector(tax_table(microbial)[which(rownames(tax_table(microbial)) == i), level])
lab = sprintf("%s_%s", x, i)
rownames(microbial.glom.count)[which(rownames(microbial.glom.count) == i)] = lab
cat(i, "\n")
}
Group_real = as.vector(as.data.frame(sample_data(microbial.glom))$Outcome)
ID_real = as.vector(as.data.frame(sample_data(microbial.glom))$AnnotatedID)
Time_real = as.data.frame(sample_data(microbial.glom))$TimeAfterTransplantation
output_all_nbinomial_phylum = metalondaAll(Count = microbial.glom.count, Time = Time_real, Group = Group_real,
ID = ID_real, fit.method = "nbinomial", n.perm = 1000,
num.intervals = 99, parall = FALSE, pvalue.threshold = 0.1,
adjust.method = "BH", time.unit = "days", norm.method = "none",
prefix = "LTx_Phylum", col = c("firebrick", "blue"))
source("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/MetaLonDA_dev/v1.1.4/MetaLonDA/R/CurveFitting.R")
source("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/MetaLonDA_dev/v1.1.4/MetaLonDA/R/CurveFitting.R")
source("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/MetaLonDA_dev/v1.1.4/MetaLonDA/R/Visualization.R")
source("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/MetaLonDA_dev/v1.1.4/MetaLonDA/R/Permutation.R")
source("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/MetaLonDA_dev/v1.1.4/MetaLonDA/R/Normalization.R")
source("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/MetaLonDA_dev/v1.1.4/MetaLonDA/R/Metalonda.R")
level =  "Phylum"
microbial.glom = tax_glom(microbial.filtered, level)
dim(otu_table(microbial.glom))
apply(otu_table(microbial.glom), 1 , sum)
apply(otu_table(microbial.glom), 1 , mean)
apply(otu_table(microbial.glom), 1 , median)
microbial.glom.count = as.data.frame(otu_table(microbial.glom))
for (i in rownames(microbial.glom.count))
{
x = as.vector(tax_table(microbial)[which(rownames(tax_table(microbial)) == i), level])
lab = sprintf("%s_%s", x, i)
rownames(microbial.glom.count)[which(rownames(microbial.glom.count) == i)] = lab
cat(i, "\n")
}
Group_real = as.vector(as.data.frame(sample_data(microbial.glom))$Outcome)
ID_real = as.vector(as.data.frame(sample_data(microbial.glom))$AnnotatedID)
Time_real = as.data.frame(sample_data(microbial.glom))$TimeAfterTransplantation
output_all_nbinomial_phylum = metalondaAll(Count = microbial.glom.count, Time = Time_real, Group = Group_real,
ID = ID_real, fit.method = "nbinomial", n.perm = 1000,
num.intervals = 99, parall = FALSE, pvalue.threshold = 0.1,
adjust.method = "BH", time.unit = "days", norm.method = "none",
prefix = "LTx_Phylum", col = c("firebrick", "blue"))
microbial.glom.count
output_all_nbinomial_phylum = metalondaAll(Count = microbial.glom.count[c(2,3,6,7,12),], Time = Time_real, Group = Group_real,
ID = ID_real, fit.method = "nbinomial", n.perm = 1000,
num.intervals = 99, parall = FALSE, pvalue.threshold = 0.1,
adjust.method = "BH", time.unit = "days", norm.method = "none",
prefix = "LTx_Phylum", col = c("firebrick", "blue"))
top5ph = sort(tapply(taxa_sums(bacteria_norm), tax_table(bacteria_norm)[, "Phylum"], sum), decreasing = TRUE)[1:5]
top4ph = top5ph[which(names(top5ph)!="")] ### remove unannotated phylum
bacteria.RA = transform_sample_counts(bacteria_norm, function(x) x / sum(x))
bacteria.top4.phylum.RA = subset_taxa(bacteria.RA, Phylum %in% names(top4ph))
p = plot_bar(bacteria.top4.phylum.RA, x = "TimePoint", fill="Phylum",
facet_grid= AnnotatedID~.)
p + geom_bar(stat="identity", position="stack") +
ggtitle("Top Bacterial Phyla") +
scale_fill_manual(values = cbbPalette_9) +
labs(y = "Relative Abundance", x = "Timepoint") + theme_bw() +
scale_y_continuous(breaks = c(0, 1)) +
theme(axis.text.x = element_text(colour="black", size=12, angle=0, hjust=0.5, vjust=0, face="bold"),
axis.text.y = element_text(colour="black", size=8, angle=0, hjust=0.5, vjust=0.5, face="bold"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=8, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position="bottom",
strip.text = element_text(size=6, face = "bold"), strip.background =element_rect(aes(fill=bacteria.top4.phylum.RA$Outcome)))
proteo = subset_taxa(bacteria_norm, Phylum == "Proteobacteria")
proteo_genus = tax_glom(proteo, taxrank="Genus")
top10genus = sort(tapply(taxa_sums(proteo_genus), tax_table(proteo_genus)[, "Genus"], sum), decreasing = TRUE)[1:10]
top8genus = top10genus[-c(2,8)] ## remove Paraburkholderia as it is very homologous to Burkholderia, and Alteromonas as it's very likely to be contamination
proteo.genus.RA = transform_sample_counts(proteo_genus, function(x) x / sum(x))
proteo.genus.RA.top8 = subset_taxa(proteo.genus.RA, Genus %in% names(top8genus))
p = plot_bar(proteo.genus.RA.top8, x = "TimePoint", fill="Genus",
facet_grid= AnnotatedID ~ .)
p + geom_bar(stat="identity", position="stack") +
ggtitle("Top Proteobacteria Genera") +
scale_fill_manual(values = cbbPalette_10) +
labs(y = "Relative Abundance", x = "Timepoint") + theme_bw() +
scale_y_continuous(breaks = c(0, 1)) +
theme(axis.text.x = element_text(colour="black", size=12, angle=0, hjust=0.5, vjust=0, face="bold"),
axis.text.y = element_text(colour="black", size=8, angle=0, hjust=0.5, vjust=0.5, face="bold"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=8, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position="bottom",
strip.text = element_text(size=6, face = "bold"))
firm = subset_taxa(bacteria_norm, Phylum == "Firmicutes")
firm_genus = tax_glom(firm, taxrank="Genus")
top8genus = sort(tapply(taxa_sums(firm_genus), tax_table(firm_genus)[, "Genus"], sum), decreasing = TRUE)[1:8]
firm.genus.RA = transform_sample_counts(firm_genus, function(x) x / sum(x))
firm.genus.RA.top8 = subset_taxa(firm.genus.RA, Genus %in% names(top8genus))
p = plot_bar(firm.genus.RA.top8, x = "TimePoint", fill="Genus",
facet_grid= AnnotatedID ~ .)
p + geom_bar(stat="identity", position="stack") +
ggtitle("Top 8 Firmicutes Genera") +
scale_fill_manual(values = cbbPalette_10) +
labs(y = "Relative Abundance", x = "Timepoint") + theme_bw() +
scale_y_continuous(breaks = c(0, 1)) +
theme(axis.text.x = element_text(colour="black", size=12, angle=0, hjust=0.5, vjust=0, face="bold"),
axis.text.y = element_text(colour="black", size=8, angle=0, hjust=0.5, vjust=0.5, face="bold"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=8, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position="bottom",
strip.text = element_text(size=6, face = "bold"))
burkholderia = subset_taxa(bacteria_norm, Genus == "Burkholderia")
burkholderia.species = sort(tapply(taxa_sums(burkholderia), tax_table(burkholderia)[, "Species"], sum), decreasing = TRUE)
burkholderia.species = burkholderia.species[which(names(burkholderia.species)!="")]
burkholderia.species.RA = transform_sample_counts(burkholderia, function(x) x / sum(x))
burkholderia.species.top = subset_taxa(burkholderia.species.RA, Species %in% names(burkholderia.species))
write.csv(otu_table(burkholderia.species.top), file = "burkholderia.species.top_OTUs.csv")
write.csv(tax_table(burkholderia.species.top), file="burkholderia.species.top_taxa.csv")
save(burkholderia.species.top, file = "proteo.genus.RA.top8.RData")
p = plot_bar(burkholderia.species.top, x = "TimePoint", fill="Species",
facet_grid= AnnotatedID ~ .)
p + geom_bar(stat="identity", position="stack") +
ggtitle("Burkholderia Species") +
#scale_fill_manual(values = cbbPalette_10) +
#scale_fill_brewer(palette = "Set3")
labs(y = "Relative Abundance", x = "Timepoint") + theme_bw() +
scale_y_continuous(breaks = c(0, 1)) +
theme(axis.text.x = element_text(colour="black", size=12, angle=0, hjust=0.5, vjust=0, face="bold"),
axis.text.y = element_text(colour="black", size=8, angle=0, hjust=0.5, vjust=0.5, face="bold"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=5, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position="right",
strip.text = element_text(size=6, face = "bold"))
top5ph = sort(tapply(taxa_sums(bacteria), tax_table(bacteria)[, "Phylum"], sum), decreasing = TRUE)[1:5]
top4ph = top5ph[which(names(top5ph)!="")] ### remove unannotated phylum
bacteria.RA = transform_sample_counts(bacteria, function(x) x / sum(x))
bacteria.top4.phylum.RA = subset_taxa(bacteria.RA, Phylum %in% names(top4ph))
p = plot_bar(bacteria.top4.phylum.RA, x = "TimePoint", fill="Phylum",
facet_grid= AnnotatedID~.)
p + geom_bar(stat="identity", position="stack") +
ggtitle("Top Bacterial Phyla") +
scale_fill_manual(values = cbbPalette_9) +
labs(y = "Relative Abundance", x = "Timepoint") + theme_bw() +
scale_y_continuous(breaks = c(0, 1)) +
theme(axis.text.x = element_text(colour="black", size=12, angle=0, hjust=0.5, vjust=0, face="bold"),
axis.text.y = element_text(colour="black", size=8, angle=0, hjust=0.5, vjust=0.5, face="bold"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=8, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position="bottom",
strip.text = element_text(size=6, face = "bold"), strip.background =element_rect(aes(fill=bacteria.top4.phylum.RA$Outcome)))
warnings()
top5ph = sort(tapply(taxa_sums(bacteria), tax_table(bacteria)[, "Phylum"], sum), decreasing = TRUE)[1:5]
top5ph
top4ph = top5ph[which(names(top5ph)!="")] ### remove unannotated phylum
top4ph
proteo = subset_taxa(bacteria, Phylum == "Proteobacteria")
proteo
proteo_genus = tax_glom(proteo, taxrank="Genus")
top10genus = sort(tapply(taxa_sums(proteo_genus), tax_table(proteo_genus)[, "Genus"], sum), decreasing = TRUE)[1:10]
top10genus
proteo = subset_taxa(bacteria_norm, Phylum == "Proteobacteria")
proteo_genus = tax_glom(proteo, taxrank="Genus")
top10genus = sort(tapply(taxa_sums(proteo_genus), tax_table(proteo_genus)[, "Genus"], sum), decreasing = TRUE)[1:10]
top10genus
proteo = subset_taxa(bacteria_norm, Phylum == "Proteobacteria")
proteo_genus = tax_glom(proteo, taxrank="Genus")
top10genus = sort(tapply(taxa_sums(proteo_genus), tax_table(proteo_genus)[, "Genus"], sum), decreasing = TRUE)[1:10]
top8genus = top10genus[-c(2,5)] ## remove Paraburkholderia as it is very homologous to Burkholderia, and Alteromonas as it's very likely to be contamination
proteo.genus.RA = transform_sample_counts(proteo_genus, function(x) x / sum(x))
proteo.genus.RA.top8 = subset_taxa(proteo.genus.RA, Genus %in% names(top8genus))
p = plot_bar(proteo.genus.RA.top8, x = "TimePoint", fill="Genus",
facet_grid= AnnotatedID ~ .)
p + geom_bar(stat="identity", position="stack") +
ggtitle("Top Proteobacteria Genera") +
scale_fill_manual(values = cbbPalette_10) +
labs(y = "Relative Abundance", x = "Timepoint") + theme_bw() +
scale_y_continuous(breaks = c(0, 1)) +
theme(axis.text.x = element_text(colour="black", size=12, angle=0, hjust=0.5, vjust=0, face="bold"),
axis.text.y = element_text(colour="black", size=8, angle=0, hjust=0.5, vjust=0.5, face="bold"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=8, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position="bottom",
strip.text = element_text(size=6, face = "bold"))
proteo = subset_taxa(bacteria_norm, Phylum == "Proteobacteria")
proteo_genus = tax_glom(proteo, taxrank="Genus")
top10genus = sort(tapply(taxa_sums(proteo_genus), tax_table(proteo_genus)[, "Genus"], sum), decreasing = TRUE)[1:9]
top8genus = top10genus[-c(2,5)] ## remove Paraburkholderia as it is very homologous to Burkholderia, and Alteromonas as it's very likely to be contamination
proteo.genus.RA = transform_sample_counts(proteo_genus, function(x) x / sum(x))
proteo.genus.RA.top8 = subset_taxa(proteo.genus.RA, Genus %in% names(top8genus))
p = plot_bar(proteo.genus.RA.top8, x = "TimePoint", fill="Genus",
facet_grid= AnnotatedID ~ .)
p + geom_bar(stat="identity", position="stack") +
ggtitle("Top Proteobacteria Genera") +
scale_fill_manual(values = cbbPalette_10) +
labs(y = "Relative Abundance", x = "Timepoint") + theme_bw() +
scale_y_continuous(breaks = c(0, 1)) +
theme(axis.text.x = element_text(colour="black", size=12, angle=0, hjust=0.5, vjust=0, face="bold"),
axis.text.y = element_text(colour="black", size=8, angle=0, hjust=0.5, vjust=0.5, face="bold"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=8, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position="bottom",
strip.text = element_text(size=6, face = "bold"))
firm = subset_taxa(bacteria, Phylum == "Firmicutes")
firm_genus = tax_glom(firm, taxrank="Genus")
top8genus = sort(tapply(taxa_sums(firm_genus), tax_table(firm_genus)[, "Genus"], sum), decreasing = TRUE)[1:8]
top8genus
firm = subset_taxa(bacteria_norm, Phylum == "Firmicutes")
firm_genus = tax_glom(firm, taxrank="Genus")
top8genus = sort(tapply(taxa_sums(firm_genus), tax_table(firm_genus)[, "Genus"], sum), decreasing = TRUE)[1:8]
top8genus
firm = subset_taxa(bacteria_norm, Phylum == "Firmicutes")
firm_genus = tax_glom(firm, taxrank="Genus")
top8genus = sort(tapply(taxa_sums(firm_genus), tax_table(firm_genus)[, "Genus"], sum), decreasing = TRUE)[1:7]
firm.genus.RA = transform_sample_counts(firm_genus, function(x) x / sum(x))
firm.genus.RA.top8 = subset_taxa(firm.genus.RA, Genus %in% names(top8genus))
p = plot_bar(firm.genus.RA.top8, x = "TimePoint", fill="Genus",
facet_grid= AnnotatedID ~ .)
p + geom_bar(stat="identity", position="stack") +
ggtitle("Top 8 Firmicutes Genera") +
scale_fill_manual(values = cbbPalette_10) +
labs(y = "Relative Abundance", x = "Timepoint") + theme_bw() +
scale_y_continuous(breaks = c(0, 1)) +
theme(axis.text.x = element_text(colour="black", size=12, angle=0, hjust=0.5, vjust=0, face="bold"),
axis.text.y = element_text(colour="black", size=8, angle=0, hjust=0.5, vjust=0.5, face="bold"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=8, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position="bottom",
strip.text = element_text(size=6, face = "bold"))
ord_nmds_jaccard = ordinate(microbial_norm, method = "NMDS", distance = "jaccard",
autotransform = FALSE, diag = TRUE, upper = TRUE)
plot_ordination(microbial_norm, ord_nmds_jaccard, color = "Outcome") +  geom_point(size = 3) +
ggtitle("NMDS using Jaccard") +
scale_fill_manual(values = cbbPalette_12) +
scale_color_manual(values=c( "red", "midnightblue"),  breaks=c("BO", "non-BO")) +
#scale_fill_brewer(palette = "Set3")
#labs(y = "# reads", x = "Sample") + theme_bw() +
#scale_y_continuous(breaks = c(0, 1)) +
theme_bw() +
theme(axis.text.x = element_text(colour="black", size=10, angle=0, hjust=0.5, vjust=0.5, face="plain"),
axis.text.y = element_text(colour="black", size=10, angle=0, hjust=1, vjust=0.5, face="plain"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=15, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position = "top",
strip.text = element_text(size=12, face = "bold")) +
guides(colour = guide_legend(nrow = 1))
plot_ordination(microbial_norm, ord_nmds_jaccard, color = "AnnotatedID") +  geom_point(size = 3) +
ggtitle("NMDS using Jaccard") +
scale_fill_manual(values = cbbPalette_12) +
scale_color_manual(values=cbbPalette_12) +
#scale_color_manual(values=c( "red", "midnightblue"),  breaks=c("BO", "non-BO")) +
#scale_fill_brewer(palette = "Set3")
#labs(y = "# reads", x = "Sample") + theme_bw() +
#scale_y_continuous(breaks = c(0, 1)) +
theme_bw() +
theme(axis.text.x = element_text(colour="black", size=10, angle=0, hjust=0.5, vjust=0.5, face="plain"),
axis.text.y = element_text(colour="black", size=10, angle=0, hjust=1, vjust=0.5, face="plain"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=10, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position = "top",
strip.text = element_text(size=12, face = "bold")) +
guides(colour = guide_legend(nrow = 1))
?ordinate
microbial_norm
names(sample_data(microbial_norm))
plot_ordination(microbial_norm, ord_nmds_jaccard, color = "TimeAfterTransplantation") +  geom_point(size = 3) +
ggtitle("NMDS using Jaccard") +
#scale_fill_manual(values = cbbPalette_12) +
#scale_color_manual(values=cbbPalette_12) +
#scale_color_manual(values=c( "red", "midnightblue"),  breaks=c("BO", "non-BO")) +
#scale_fill_brewer(palette = "Set3")
#labs(y = "# reads", x = "Sample") + theme_bw() +
#scale_y_continuous(breaks = c(0, 1)) +
theme_bw() +
theme(axis.text.x = element_text(colour="black", size=10, angle=0, hjust=0.5, vjust=0.5, face="plain"),
axis.text.y = element_text(colour="black", size=10, angle=0, hjust=1, vjust=0.5, face="plain"),
axis.title.x = element_text(colour="black", size=15, angle=0, hjust=.5, vjust=0.5, face="bold"),
axis.title.y = element_text(colour="black", size=15, angle=90, hjust=.5, vjust=.5, face="bold"),
legend.text=element_text(size=10, face="plain"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.position = "top",
strip.text = element_text(size=12, face = "bold")) +
guides(colour = guide_legend(nrow = 1))
